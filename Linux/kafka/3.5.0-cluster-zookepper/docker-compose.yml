# https://hub.docker.com/r/bitnami/kafka
# https://github.com/bitnami/containers/blob/main/bitnami/kafka/docker-compose-cluster.yml

version: "3"

# 定义通用配置
x-kafka-common: &kafka-common
  image: registry.cn-hangzhou.aliyuncs.com/zhengqing/kafka:3.5.0 # 原镜像`bitnami/kafka:3.5.0`
  restart: unless-stopped # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
x-kafka-common-env: &kafka-common-env
  KAFKA_HEAP_OPTS: -Xmx512m -Xms512m # 亲测128m会出现oom
  KAFKA_ENABLE_KRAFT: "no" # 是否启用Kafka Raft（KRaft）模式。默认值：是
  KAFKA_CFG_PROCESS_ROLES: "" # 清空角色配置
  ALLOW_PLAINTEXT_LISTENER: yes # 允许使用 PLAINTEXT 监听器（开发环境允许）
  KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181 # zookeeper连接地址
  KAFKA_ZOOKEEPER_PROTOCOL: SASL # 设置Zookeeper协议为SASL
  KAFKA_ZOOKEEPER_USER: admin # Zookeeper SASL用户名
  KAFKA_ZOOKEEPER_PASSWORD: admin-secret # Zookeeper SASL密码
  # 简化监听器配置，先使用PLAINTEXT协议让集群先正常启动
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
  KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
  # 允许所有用户执行集群操作
  KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  # 禁止自动创建主题
  KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
  # 消费者组元数据主题配置
  KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
  # 禁止自动创建消费者组
  KAFKA_CFG_ALLOW_AUTO_CREATE_TOPICS: "false"
  # 开启组协调器的授权检查
  KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 5000
  # 启用ACL认证
  KAFKA_CFG_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
  # 超级用户 - 为ANONYMOUS添加超级用户权限以支持PLAINTEXT内部通信
  # KAFKA_CFG_SUPER_USERS: "User:admin;User:ANONYMOUS"
  KAFKA_CFG_SUPER_USERS: "User:admin"
  # SASL配置 - 仅用于外部监听器
  KAFKA_CFG_SASL_ENABLED_MECHANISMS: SCRAM-SHA-256
  KAFKA_CLIENT_USERS: admin
  KAFKA_CLIENT_PASSWORDS: admin-secret
  # 只对外部监听器启用SASL
  KAFKA_CFG_LISTENER_NAME_EXTERNAL_SASL_ENABLED_MECHANISMS: SCRAM-SHA-256
  KAFKA_CFG_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: ""
  # 由于内部使用PLAINTEXT，删除此配置
  # KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL: SCRAM-SHA-256
  KAFKA_OPTS: "-Djava.security.auth.login.config=/opt/bitnami/kafka/config/kafka_jaas.conf"

# 网桥 -> 方便相互通讯
networks:
  kafka:
    ipam:
      driver: default
      config:
        - subnet: "172.12.6.0/24"

services:
  zookeeper:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/zookeeper:latest # 原镜像`bitnami/zookeeper:latest`
    container_name: zookeeper-server # 容器名为'zookeeper-server'
    restart: unless-stopped # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    volumes: # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "/etc/localtime:/etc/localtime"
      - "./config/zookeeper_jaas.conf:/opt/bitnami/zookeeper/conf/zookeeper_jaas.conf"
    #      - "./kafka/zookeeper:/bitnami/zookeeper"
    environment:
      ALLOW_ANONYMOUS_LOGIN: no
      # 启用JAAS认证配置
      ZOO_SERVER_USERS: admin
      ZOO_SERVER_PASSWORDS: admin-secret
      ZOO_ENABLE_AUTH: "yes"
      ZOO_AUTH_PROVIDER_1: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
      JVMFLAGS: "-Djava.security.auth.login.config=/opt/bitnami/zookeeper/conf/zookeeper_jaas.conf -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider"
    ports: # 映射端口
      - "2181:2181"
    networks:
      kafka:
        ipv4_address: 172.12.6.11

  kafka-1:
    container_name: kafka-1
    <<: *kafka-common
    volumes:
      - "/etc/localtime:/etc/localtime"
      - "./config/kafka_jaas.conf:/opt/bitnami/kafka/config/kafka_jaas.conf"
      - "./config/producer-admin.properties:/opt/bitnami/kafka/config/producer-admin.properties"
      - "./config/consumer-admin.properties:/opt/bitnami/kafka/config/consumer-admin.properties"
      - "./config/consumer-test.properties:/opt/bitnami/kafka/config/consumer-test.properties"
    #      - "./kafka/kafka-1:/bitnami/kafka"
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://0.0.0.0:9093 # kafka监听地址
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka-1:9092,EXTERNAL://host.docker.internal:9093 # TODO 外网访问填写域名或主机IP -- 让客户端能够监听消息  （ host.docker.internal：自动识别主机IP，在Windows或Mac上运行Docker有效 ）
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    networks:
      kafka:
        ipv4_address: 172.12.6.21
  kafka-2:
    container_name: kafka-2
    <<: *kafka-common
    volumes:
      - "/etc/localtime:/etc/localtime"
      - "./config/kafka_jaas.conf:/opt/bitnami/kafka/config/kafka_jaas.conf"
      - "./config/producer-admin.properties:/opt/bitnami/kafka/config/producer-admin.properties"
      - "./config/consumer-admin.properties:/opt/bitnami/kafka/config/consumer-admin.properties"
      - "./config/consumer-test.properties:/opt/bitnami/kafka/config/consumer-test.properties"
    #      - "./kafka/kafka-2:/bitnami/kafka"
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_BROKER_ID: 2
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://0.0.0.0:9094 # kafka监听地址
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka-2:9092,EXTERNAL://host.docker.internal:9094 # TODO 外网访问填写域名或主机IP -- 让客户端能够监听消息  （ host.docker.internal：自动识别主机IP，在Windows或Mac上运行Docker有效 ）
    ports:
      - "9094:9094"
    depends_on:
      - zookeeper
    networks:
      kafka:
        ipv4_address: 172.12.6.22

  # kafka-map图形化管理工具 配置参考：https://github.com/dushixiang/kafka-map
  kafka-map:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/kafka-map # 原镜像`dushixiang/kafka-map:latest`
    container_name: kafka-map # 容器名为'kafka-map'
    restart: unless-stopped # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    volumes:
      - "./config/kafka_client.properties:/kafka_client.properties"
      - "./kafka/kafka-map/data:/usr/local/kafka-map/data"
    environment:
      DEFAULT_USERNAME: admin
      DEFAULT_PASSWORD: 123456
    ports: # 映射端口
      - "9006:8080"
    depends_on: # 解决容器依赖启动先后问题
      - kafka-1
      - kafka-2
    links: # 配置容器互相连接
      - kafka-1
      - kafka-2
    networks:
      kafka:
        ipv4_address: 172.12.6.30

  # kafka-console-ui图形化管理工具 配置参考：https://github.com/xxd763795151/kafka-console-ui
  kafka-console-ui:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/kafka-console-ui # 原镜像`wdkang/kafka-console-ui`
    container_name: kafka-console-ui # 容器名
    restart: unless-stopped # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    volumes:
      - "./kafka-console-ui/data:/app/data"
      - "./kafka-console-ui/log:/app/log"
    ports: # 映射端口
      - "7766:7766"
    depends_on: # 解决容器依赖启动先后问题
      - kafka-1
      - kafka-2
    links: # 配置容器互相连接
      - kafka-1
      - kafka-2
    networks:
      kafka:
        ipv4_address: 172.12.6.50
